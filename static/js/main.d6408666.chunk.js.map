{"version":3,"sources":["data/ACT_Road_Crash_Data.csv","components/Map/index.js","components/Control/style.js","components/Control/index.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","PICKUP_COLOR","LIGHT_SETTINGS","lightsPosition","ambientRatio","diffuseRatio","specularRatio","lightsStrength","numberOfLights","renderLayers","props","_objectSpread2","data","settings","ScatterplotLayer","Object","objectSpread","id","getPosition","d","position","getColor","getRadius","opacity","pickable","radiusMinPixels","radiusMaxPixels","HexagonLayer","coverage","elevationRange","elevationScale","extruded","defineProperty","layerControl","borderRadius","boxShadow","fontFamily","fontSize","lineHeight","width","top","right","padding","zIndex","background","Component","Setting","propType","type","react_default","a","createElement","Control_Slider","Control_Checkbox","Checkbox","_ref2","settingName","value","onChange","key","className","checked","e","target","Slider","_ref3","_propType$max","max","min","step","Number","INITIAL_VIEW_STATE","longitude","latitude","zoom","minZoom","maxZoom","pitch","bearing","App","state","points","style","this","_processData","_this2","csv","csvFile","then","reduce","accu","curr","push","LONGITUDE","LATITUDE","pickup","setState","esm","layers","initialViewState","controller","dist_esm","mapStyle","mapboxApiAccessToken","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.d6408666.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ACT_Road_Crash_Data.f2ea5bf0.csv\";","import { ScatterplotLayer, HexagonLayer } from 'deck.gl'\r\nimport * as d3 from 'd3'\r\nimport { scaleLinear } from 'd3-scale'\r\n\r\nconst PICKUP_COLOR = [255, 255, 0]\r\n\r\n// export function renderLayers(props) {\r\n//   const { data, onHover, settings } = props\r\n//   return [\r\n//     new ScatterplotLayer({\r\n//       id: 'scatterplot',\r\n//       data,\r\n//       getPosition: d => d.position,\r\n//       getColor: PICKUP_COLOR,\r\n//       getRadius: d => 10,\r\n//       opacity: 0.5,\r\n//       pickable: true,\r\n//       radiusMinPixels: 0.25,\r\n//       radiusMaxPixels: 30,\r\n//       ...settings,\r\n//     }),\r\n//   ]\r\n// }\r\n\r\nconst HEATMAP_COLORS = [\r\n  [1, 152, 189],\r\n  [73, 227, 206],\r\n  [216, 254, 181],\r\n  [254, 237, 177],\r\n  [254, 173, 84],\r\n  [209, 55, 78],\r\n]\r\n\r\nconst LIGHT_SETTINGS = {\r\n  lightsPosition: [149.137, -35.24, 8000, 149.137, -35.24, 8000],\r\n  ambientRatio: 0.4,\r\n  diffuseRatio: 0.6,\r\n  specularRatio: 0.2,\r\n  lightsStrength: [0.8, 0.0, 0.8, 0.0],\r\n  numberOfLights: 2,\r\n}\r\n\r\nexport function renderLayers(props) {\r\n  const { data, settings } = props\r\n\r\n  return [\r\n    // settings.showScatterplot &&\r\n      new ScatterplotLayer({\r\n        id: 'scatterplot',\r\n        data,\r\n        getPosition: d => d.position,\r\n        getColor: PICKUP_COLOR,\r\n        getRadius: d => 10,\r\n        opacity: 0.5,\r\n        pickable: true,\r\n        radiusMinPixels: 0.25,\r\n        radiusMaxPixels: 30,\r\n        ...settings,\r\n      }),\r\n    // settings.showHexagon &&\r\n      new HexagonLayer({\r\n        id: 'heatmap',\r\n        data,\r\n        coverage: 1,\r\n        elevationRange: [0, 10000],\r\n        elevationScale: 20,\r\n        extruded: true,\r\n        getPosition: d => d.position,\r\n        opacity: 1,\r\n        coverage: 1,\r\n        radius: 30,\r\n        upperPercentile: 99,\r\n        pickable: true,\r\n        lightSettings: LIGHT_SETTINGS,\r\n        ...settings,\r\n      }),\r\n  ]\r\n}\r\n","export const tooltipStyle = {\r\n  position: 'absolute',\r\n  padding: '4px',\r\n  background: 'rgba(0, 0, 0, 0.8)',\r\n  color: '#fff',\r\n  maxWidth: '300px',\r\n  fontSize: '10px',\r\n  zIndex: 9,\r\n  pointerEvents: 'none',\r\n}\r\n\r\nexport const mapStylePicker = {\r\n  background: '#fff',\r\n  position: 'absolute',\r\n  top: '20px',\r\n  left: '20px',\r\n  zIndex: 100,\r\n}\r\n\r\nexport const layerControl = {\r\n  borderRadius: 3,\r\n  boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\r\n  fontFamily:\r\n    'ff-clan-web-pro, \"Helvetica Neue\", Helvetica, sans-serif !important',\r\n  fontSize: '12px',\r\n  lineHeight: 1.833,\r\n  width: 200,\r\n  position: 'absolute',\r\n  top: '20px',\r\n  right: '20px',\r\n  padding: '20px',\r\n  zIndex: 100,\r\n  background: 'white',\r\n}\r\n\r\nexport const charts = {\r\n  background: 'white',\r\n  borderRadius: 3,\r\n  boxShadow: '0 1px 2px rgba(0, 0, 0, 0.1)',\r\n  fontFamily:\r\n    'ff-clan-web-pro, \"Helvetica Neue\", Helvetica, sans-serif !important',\r\n  fontSize: '12px',\r\n  lineHeight: 1.833,\r\n  height: 210,\r\n  padding: '10px',\r\n  position: 'absolute',\r\n  left: 20,\r\n  bottom: 20,\r\n  width: 500,\r\n  zIndex: 100,\r\n}\r\n\r\nexport const spinner = {\r\n  animation: 'linear 2s infinite',\r\n  background: '#1EACC7',\r\n  borderRadius: '50%',\r\n  height: 10,\r\n  width: 10,\r\n  opacity: 0.4,\r\n  position: 'absolute',\r\n  top: 70,\r\n  left: 60,\r\n  transformOrigin: '20px 20px',\r\n  zIndex: 110,\r\n}\r\n","import React, { Component } from 'react'\r\nimport { mapStylePicker, layerControl } from './style'\r\n\r\nexport const HEXAGON_CONTROLS = {\r\n  showHexagon: {\r\n    displayName: 'Show Hexagon',\r\n    type: 'boolean',\r\n    value: true,\r\n  },\r\n  radius: {\r\n    displayName: 'Hexagon Radius',\r\n    type: 'range',\r\n    value: 250,\r\n    step: 50,\r\n    min: 50,\r\n    max: 1000,\r\n  },\r\n  coverage: {\r\n    displayName: 'Hexagon Coverage',\r\n    type: 'range',\r\n    value: 0.7,\r\n    step: 0.1,\r\n    min: 0,\r\n    max: 1,\r\n  },\r\n  upperPercentile: {\r\n    displayName: 'Hexagon Upper Percentile',\r\n    type: 'range',\r\n    value: 100,\r\n    step: 0.1,\r\n    min: 80,\r\n    max: 100,\r\n  },\r\n  showScatterplot: {\r\n    displayName: 'Show Scatterplot',\r\n    type: 'boolean',\r\n    value: true,\r\n  },\r\n  radiusScale: {\r\n    displayName: 'Scatterplot Radius',\r\n    type: 'range',\r\n    value: 30,\r\n    step: 10,\r\n    min: 10,\r\n    max: 200,\r\n  },\r\n}\r\n\r\nexport const SCATTERPLOT_CONTROLS = {\r\n  showScatterplot: {\r\n    displayName: 'Show Scatterplot',\r\n    type: 'boolean',\r\n    value: true,\r\n  },\r\n  radiusScale: {\r\n    displayName: 'Scatterplot Radius',\r\n    type: 'range',\r\n    value: 30,\r\n    step: 10,\r\n    min: 10,\r\n    max: 200,\r\n  },\r\n}\r\n\r\nconst MAPBOX_DEFAULT_MAPSTYLES = [\r\n  { label: 'Streets V10', value: 'mapbox://styles/mapbox/streets-v10' },\r\n  { label: 'Outdoors V10', value: 'mapbox://styles/mapbox/outdoors-v10' },\r\n  { label: 'Light V9', value: 'mapbox://styles/mapbox/light-v9' },\r\n  { label: 'Dark V9', value: 'mapbox://styles/mapbox/dark-v9' },\r\n  { label: 'Satellite V9', value: 'mapbox://styles/mapbox/satellite-v9' },\r\n  {\r\n    label: 'Satellite Streets V10',\r\n    value: 'mapbox://styles/mapbox/satellite-streets-v10',\r\n  },\r\n  {\r\n    label: 'Navigation Preview Day V4',\r\n    value: 'mapbox://styles/mapbox/navigation-preview-day-v4',\r\n  },\r\n  {\r\n    label: 'Navitation Preview Night V4',\r\n    value: 'mapbox://styles/mapbox/navigation-preview-night-v4',\r\n  },\r\n  {\r\n    label: 'Navigation Guidance Day V4',\r\n    value: 'mapbox://styles/mapbox/navigation-guidance-day-v4',\r\n  },\r\n  {\r\n    label: 'Navigation Guidance Night V4',\r\n    value: 'mapbox://styles/mapbox/navigation-guidance-night-v4',\r\n  },\r\n]\r\n\r\nexport function MapStylePicker({ currentStyle, onStyleChange }) {\r\n  return (\r\n    <select\r\n      className=\"map-style-picker\"\r\n      style={mapStylePicker}\r\n      value={currentStyle}\r\n      onChange={e => onStyleChange(e.target.value)}\r\n    >\r\n      {MAPBOX_DEFAULT_MAPSTYLES.map(style => (\r\n        <option key={style.value} value={style.value}>\r\n          {style.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport class LayerControls extends Component {\r\n  _onValueChange(settingName, newValue) {\r\n    const { settings } = this.props\r\n    // Only update if we have a confirmed change\r\n    if (settings[settingName] !== newValue) {\r\n      // Create a new object so that shallow-equal detects a change\r\n      const newSettings = {\r\n        ...this.props.settings,\r\n        [settingName]: newValue,\r\n      }\r\n\r\n      this.props.onChange(newSettings)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { title, settings, propTypes = {} } = this.props\r\n\r\n    return (\r\n      <div className=\"layer-controls\" style={layerControl}>\r\n        {title && <h4>{title}</h4>}\r\n        {Object.keys(settings).map(key => (\r\n          <div key={key}>\r\n            <label>{propTypes[key].displayName}</label>\r\n            <div style={{ display: 'inline-block', float: 'right' }}>\r\n              {settings[key]}\r\n            </div>\r\n            <Setting\r\n              settingName={key}\r\n              value={settings[key]}\r\n              propType={propTypes[key]}\r\n              onChange={this._onValueChange.bind(this)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst Setting = props => {\r\n  const { propType } = props\r\n  if (propType && propType.type) {\r\n    switch (propType.type) {\r\n      case 'range':\r\n        return <Slider {...props} />\r\n\r\n      case 'boolean':\r\n        return <Checkbox {...props} />\r\n      default:\r\n        return <input {...props} />\r\n    }\r\n  }\r\n}\r\n\r\nconst Checkbox = ({ settingName, value, onChange }) => {\r\n  return (\r\n    <div key={settingName}>\r\n      <div className=\"input-group\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id={settingName}\r\n          checked={value}\r\n          onChange={e => onChange(settingName, e.target.checked)}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Slider = ({ settingName, value, propType, onChange }) => {\r\n  const { max = 100 } = propType\r\n\r\n  return (\r\n    <div key={settingName}>\r\n      <div className=\"input-group\">\r\n        <div>\r\n          <input\r\n            type=\"range\"\r\n            id={settingName}\r\n            min={0}\r\n            max={max}\r\n            step={max / 100}\r\n            value={value}\r\n            onChange={e => onChange(settingName, Number(e.target.value))}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport DeckGL from 'deck.gl'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { renderLayers } from '../src/components/Map'\r\nimport { LayerControls, HEXAGON_CONTROLS } from './components/Control'\r\nimport csvFile from './data/ACT_Road_Crash_Data.csv'\r\nimport { csv } from 'd3-fetch'\r\n\r\nconst MAPBOX_TOKEN =\r\n  'pk.eyJ1IjoicGVubnlwYW5nY29kZSIsImEiOiJjanJpb2dmbWUwM3p0M3ptYTk0a2N4MXBoIn0.HoDSIfRA2aPEH5zxXt8T2Q'\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n  longitude: 149.137,\r\n  latitude: -35.24,\r\n  zoom: 11,\r\n  minZoom: 5,\r\n  maxZoom: 16,\r\n  pitch: 45,\r\n  bearing: 0,\r\n}\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    points: [],\r\n    style: 'mapbox://styles/mapbox/dark-v9',\r\n    // settings: Object.keys(HEXAGON_CONTROLS).reduce(\r\n    //   (accu, key) => ({\r\n    //     ...accu,\r\n    //     [key]: HEXAGON_CONTROLS[key].value,\r\n    //   }),\r\n    //   {}\r\n    // ),\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._processData()\r\n  }\r\n\r\n  _processData() {\r\n    csv(csvFile).then(data => {\r\n      const points = data.reduce((accu, curr) => {\r\n        accu.push({\r\n          position: [Number(curr.LONGITUDE), Number(curr.LATITUDE)],\r\n          pickup: true,\r\n        })\r\n        return accu\r\n      }, [])\r\n      this.setState({\r\n        points,\r\n      })\r\n    })\r\n  }\r\n\r\n  // _updateLayerSettings(settings) {\r\n  //   this.setState({ settings })\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <LayerControls\r\n          settings={this.state.settings}\r\n          propTypes={HEXAGON_CONTROLS}\r\n          onChange={settings => this._updateLayerSettings(settings)}\r\n        /> */}\r\n\r\n        <DeckGL\r\n          layers={renderLayers({\r\n            data: this.state.points,\r\n            // settings: this.state.settings,\r\n          })}\r\n          initialViewState={INITIAL_VIEW_STATE}\r\n          controller\r\n        >\r\n          <StaticMap\r\n            mapStyle={this.state.style}\r\n            mapboxApiAccessToken={MAPBOX_TOKEN}\r\n          />\r\n        </DeckGL>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}